name: Release Api Gateway - Step 2

permissions:
  id-token: write # This is required by image-builder
  contents: write # Read is required by image-builder, write is required to push artifact

on:
  push:
    branches:
      - 'release-**'
    paths:
      - 'sec-scanners-config.yaml'

jobs:   
  check-prerequisites: 
    name: check-prerequisites
    runs-on: ubuntu-latest
    outputs:
      current_release: ${{ steps.set-release.outputs.current_release }}
      latest_before: ${{ steps.get-latest.outputs.latest_before }}
      is_patch: ${{ steps.check_patch.outputs.is_patch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current release from sec-scanners-config.yaml file
        id: set-release
        run: |
          CURRENT=$(grep api-gateway-manager ./sec-scanners-config.yaml | cut -d ":" -f2 )
          echo "Current release: $CURRENT"
          echo "current_release=$CURRENT" >> $GITHUB_OUTPUT

      - name: Get latest release before releasing
        id: get-latest
        run: |
          LATEST=$(curl -s https://api.github.com/repos/kyma-project/api-gateway/releases/latest | grep '"tag_name"' | cut -d '"' -f 4)
          echo "Latest release before releasing: $LATEST"
          echo "latest_before=$LATEST" >> $GITHUB_OUTPUT

      - name: Determine if this is a patch release
        id: check_patch
        run: |
          if [[ "${{ steps.set-release.outputs.current_release }}" =~ ^[0-9]+\.[0-9]+\.[1-9][0-9]*$ ]]; then
            echo "is_patch=true" >> $GITHUB_OUTPUT
          else
            echo "is_patch=false" >> $GITHUB_OUTPUT
          fi

  build-image:
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    needs: [check-prerequisites]
    with:
      name: api-gateway/releases/api-gateway-manager
      dockerfile: Dockerfile
      context: .
      build-args: |
        VERSION=${{ needs.check-prerequisites.outputs.current_release }}
      tags: "${{ needs.check-prerequisites.outputs.current_release }}"

  unit-tests:
    uses: ./.github/workflows/call-unit-lint.yaml

  integration-tests:
    needs: [build-image, check-prerequisites]
    uses: ./.github/workflows/call-integration-release.yaml
    with:
      image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway/releases/api-gateway-manager:${{ needs.check-prerequisites.outputs.current_release }}"
    secrets: inherit

  create-draft:
    name: Create draft release
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-image, unit-tests, integration-tests]
    outputs:
      release_id: ${{ steps.create-draft.outputs.release_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
        run: ./scripts/create_changelog.sh $RELEASE

      - name: Create draft release
        id: create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(./scripts/create_draft_release.sh ${{ needs.check-prerequisites.outputs.current_release }})
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Create lightweight tag
        run: |
          git tag ${{ needs.check-prerequisites.outputs.current_release }}
          git push origin ${{ needs.check-prerequisites.outputs.current_release }}

  publish-release:
    name: Publish release
    needs: [create-draft, check-prerequisites]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Publish release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/publish_assets.sh ${{ needs.check-prerequisites.outputs.current_release }} ${{ needs.create-draft.outputs.release_id }}

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/publish_release.sh ${{ needs.create-draft.outputs.release_id }}

  notify:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, publish-release]
    if: success()
    steps:
      - name: Notify
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52
        with:
          webhook: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
          webhook-type: webhook-trigger
          payload-templated: true
          payload: |
            repository: ${{ github.repository }},
            release: ${{ needs.check-prerequisites.outputs.current_release }}

  post-release-adjustments:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, publish-release]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GOAT_BOT_REPO_ACCESS }}
          
      - name: Adjust latest tag if needed
        if: ${{ needs.check-prerequisites.outputs.is_patch == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_BEFORE: ${{ needs.check-prerequisites.outputs.latest_before }}
          CURRENT_RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
        run: |
          if [ "$(printf '%s\n' "$CURRENT_RELEASE" "$LATEST_BEFORE" | sort -V | head -n1)" = "$CURRENT_RELEASE" ]; then 
            echo "$LATEST_BEFORE should be marked as latest release"
            RELEASE_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/kyma-project/api-gateway/releases/tags/${LATEST_BEFORE} | jq -r '.id')

            curl -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/kyma-project/api-gateway/releases/$RELEASE_ID \
              -d '{"make_latest":"true"}'
          else
            echo "No action needed: $CURRENT_RELEASE is the latest"
          fi

      - name: Update Dependabot for major/minor releases
        if: ${{ needs.check-prerequisites.outputs.is_patch == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GOAT_BOT_REPO_ACCESS }}
          CURRENT_RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
          USERNAME: ${{ vars.ACTIONS_BOT_NAME }}
          EMAIL: ${{ vars.ACTIONS_BOT_EMAIL }}
        run: |
          git config user.name "$USERNAME"
          git config user.email "$EMAIL"

          git checkout -b dependabot-config/$CURRENT_RELEASE
          git fetch origin
          git reset --hard origin/main

          MAJOR_MINOR=$(echo $CURRENT_RELEASE | grep -Eo '^[0-9]+\.[0-9]+')
          sed -i "s|release\-.*|release\-$MAJOR_MINOR\"|g" .github/dependabot.yml
          git add .
          if git diff-index --quiet HEAD; then
            echo "Error: No changes detected"
            exit 1
          fi
          git commit -m "update dependabot.yml" -m "Generated by GitHub Actions"
          git push -f -u origin dependabot-config/$CURRENT_RELEASE
          gh pr create --base main --head dependabot-config/$CURRENT_RELEASE --fill || true 

          gh api --method DELETE repos/${{ github.repository }}/git/refs/heads/sec-scanners-config/$CURRENT_RELEASE || echo "Failed to delete branch"
