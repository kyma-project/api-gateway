name: Release Api Gateway - Step 2

permissions:
  id-token: write # This is required by image-builder
  contents: write # Read is required by image-builder, write is required to push artifact

on:
  push:
    branches:
      - 'release-**'
    paths:
      - 'sec-scanners-config.yaml'

jobs:   
  check-prerequisites: 
    name: check-prerequisites
    runs-on: ubuntu-latest
    outputs:
      current_release: ${{ steps.set-release.outputs.current_release }}
      latest_before: ${{ steps.get-latest.outputs.latest_before }}
      is_patch: ${{ steps.check_patch.outputs.is_patch }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get current release from sec-scanners-config.yaml file
        id: set-release
        run: |
          CURRENT=$(grep api-gateway-manager ./sec-scanners-config.yaml | cut -d ":" -f2 )
          echo "Current release: $CURRENT"
          echo "current_release=$CURRENT" >> $GITHUB_OUTPUT

      - name: Get latest release before releasing
        id: get-latest
        run: |
          LATEST=$(curl -s https://api.github.com/repos/kyma-project/api-gateway/releases/latest | grep '"tag_name"' | cut -d '"' -f 4)
          echo "Latest release before releasing: $LATEST"
          echo "latest_before=$LATEST" >> $GITHUB_OUTPUT

      - name: Determine if this is a patch release
        id: check_patch
        run: |
          if [[ "${{ steps.set-release.outputs.current_release }}" =~ ^[0-9]+\.[0-9]+\.[1-9][0-9]*$ ]]; then
            echo "is_patch=true" >> $GITHUB_OUTPUT
          else
            echo "is_patch=false" >> $GITHUB_OUTPUT
          fi

  build-image:
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    needs: [check-prerequisites]
    with:
      name: api-gateway/releases/api-gateway-manager
      dockerfile: Dockerfile
      context: .
      build-args: |
        VERSION=${{ needs.check-prerequisites.outputs.current_release }}
      tags: "${{ needs.check-prerequisites.outputs.current_release }}"

  unit-tests:
    uses: ./.github/workflows/call-unit-lint.yaml

  integration-tests:
    needs: [build-image, check-prerequisites]
    uses: ./.github/workflows/call-integration-release.yaml
    with:
      image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway/releases/api-gateway-manager:${{ needs.check-prerequisites.outputs.current_release }}"
    secrets: inherit

  create-draft:
    name: Create draft release
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-image, unit-tests, integration-tests]
    outputs:
      release_id: ${{ steps.create-draft.outputs.release_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
        run: ./scripts/create_changelog.sh $RELEASE

      - name: Create draft release
        id: create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(./scripts/create_draft_release.sh ${{ needs.check-prerequisites.outputs.current_release }})
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Create lightweight tag
        run: |
          git tag ${{ needs.check-prerequisites.outputs.current_release }}
          git push origin ${{ needs.check-prerequisites.outputs.current_release }}

  publish-release:
    name: Publish release
    needs: [create-draft, check-prerequisites]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Publish release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/publish_assets.sh ${{ needs.check-prerequisites.outputs.current_release }} ${{ needs.create-draft.outputs.release_id }}

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/publish_release.sh ${{ needs.create-draft.outputs.release_id }}

  notify:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, publish-release]
    if: success()
    steps:
      - name: Notify
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52
        with:
          webhook: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
          webhook-type: webhook-trigger
          payload-templated: true
          payload: |
            repository: ${{ github.repository }},
            release: ${{ needs.check-prerequisites.outputs.current_release }}

  post-release-adjustments:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, publish-release]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GOAT_BOT_REPO_ACCESS }}
          
      - name: Adjust latest tag if needed
        if: ${{ needs.check-prerequisites.outputs.is_patch == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_BEFORE: ${{ needs.check-prerequisites.outputs.latest_before }}
          CURRENT_RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
        run: |
          if [ "$(printf '%s\n' "$CURRENT_RELEASE" "$LATEST_BEFORE" | sort -V | head -n1)" = "$CURRENT_RELEASE" ]; then 
            echo "$LATEST_BEFORE should be marked as latest release"
            RELEASE_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/kyma-project/api-gateway/releases/tags/${LATEST_BEFORE} | jq -r '.id')

            curl -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/kyma-project/api-gateway/releases/$RELEASE_ID \
              -d '{"make_latest":"true"}'
          else
            echo "No action needed: $CURRENT_RELEASE is the latest"
          fi

      - name: Update Dependabot for major/minor releases
        if: ${{ needs.check-prerequisites.outputs.is_patch == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GOAT_BOT_REPO_ACCESS }}
          CURRENT_RELEASE: ${{ needs.check-prerequisites.outputs.current_release }}
          USERNAME: ${{ vars.ACTIONS_BOT_NAME }}
          EMAIL: ${{ vars.ACTIONS_BOT_EMAIL }}
        run: |
          git config user.name "$USERNAME"
          git config user.email "$EMAIL"

          git checkout -b dependabot-config/$CURRENT_RELEASE
          git fetch origin
          git reset --hard origin/main

          MAJOR_MINOR=$(echo $CURRENT_RELEASE | grep -Eo '^[0-9]+\.[0-9]+')
          sed -i "s|release\-.*|release\-$MAJOR_MINOR\"|g" .github/dependabot.yml
          git add .
          if git diff-index --quiet HEAD; then
            echo "Error: No changes detected"
            exit 1
          fi
          git commit -m "update dependabot.yml" -m "Generated by GitHub Actions"
          git push -f -u origin dependabot-config/$CURRENT_RELEASE
          gh pr create --base main --head dependabot-config/$CURRENT_RELEASE --fill || true 

          gh api --method DELETE repos/${{ github.repository }}/git/refs/heads/sec-scanners-config/$CURRENT_RELEASE || echo "Failed to delete branch"
          #removing branch created in "Release Istio - Step 1"
          git push upstream --delete sec-scanners-config/$CURRENT_RELEASE

  release-to-module-manifests:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, publish-release]
    env:
      RELEASE_TAG: "${{ needs.check-prerequisites.outputs.current_release }}"
      FULL_MODULE_NAME: kyma-project.io/module/api-gateway

      # GitHub repositories
      MODULE_MANIFESTS_WITH_USER:  "https://${{ vars.GIT_USER_NAME }}:${{ secrets.BOT_TOKEN_GITHUB_TOOLS }}@${{ vars.GH_TOOLS_HOST }}/kyma/${{ vars.MODULE_MANIFESTS_REPO_NAME }}.git"

      API_URL: "https://api.github.com/repos/kyma-project/api-gateway"
      RELEASES_URL: "https://github.com/kyma-project/api-gateway/releases"
      DOC_URL: "https://kyma-project.io/#/api-gateway/user/README"

      # File names
      DEFAULT_CR_FILENAME_RELEASE: apigateway-default-cr.yaml
      MANIFEST_FILENAME: api-gateway-manager.yaml
      SCAN_CONFIG_FILENAME: sec-scanners-config.yaml

      # needed by gh cli for GitHub enterprise
      GH_ENTERPRISE_TOKEN: ${{ secrets.BOT_TOKEN_GITHUB_TOOLS }}

    steps:
      - name: Validate required environment variables
        shell: bash
        run: |
          [ -z "${{ vars.GIT_USER_EMAIL }}" ] && echo "GIT_USER_EMAIL is required" && exit 1 
          [ -z "${{ vars.GIT_USER_NAME }}" ] && echo "GIT_USER_NAME is required" && exit 1 
          [ -z "${{ vars.GH_TOOLS_HOST }}" ] && echo "GH_TOOLS_HOST is required" && exit 1 
          [ -z "${{ vars.MODULE_MANIFESTS_REPO_NAME }}" ] && echo "MODULE_MANIFESTS_REPO_NAME is required" && exit 1 
          echo "Validated"
      - name: Validate given release tag
        shell: bash
        run: |
          tags=$(curl -s -H "Accept: application/vnd.github+json" ${API_URL}/tags | jq -r '.[] | .name')
          
          if  echo $tags | tr " " '\n' | grep -F -q -x $RELEASE_TAG; then
              echo "TAG=$RELEASE_TAG" >> $GITHUB_ENV
              echo "tag found"
          else
              echo "tag not found: $RELEASE_TAG"
              exit 1  
          fi
      - name: Set branch name
        shell: bash
        run: echo "BRANCH_NAME=api-gateway-${TAG}" >> $GITHUB_ENV

      - name: Setup git and clone repo
        shell: bash
        run: |
          git config --global http.${{ secrets.INTERNAL_GITHUB_URL }}.version "HTTP/1.1"
          git config --global user.email ${{ vars.GIT_USER_EMAIL }}
          git config --global user.name ${{ vars.GIT_USER_NAME }}
          git clone ${MODULE_MANIFESTS_WITH_USER}
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN_GITHUB_TOOLS }}

      - name: Sync Repo and create branch
        working-directory: module-manifests
        shell: bash
        run: |
          git remote add upstream ${MODULE_MANIFESTS_WITH_USER}
          git fetch upstream
          git merge upstream/main
          git checkout -B ${BRANCH_NAME}
          mkdir -p modules/api-gateway/$RELEASE_TAG
      - name: Create module configuration
        working-directory: module-manifests/modules/api-gateway/${{ env.RELEASE_TAG }}/
        shell: bash
        run: |
          echo "Creating module configuration file:"
          MODULE_VERSION="${TAG}"
          FILE_NAME="${MANIFEST_FILENAME}"
          
          cat <<EOF | tee module-config.yaml
          name: ${FULL_MODULE_NAME}
          version: ${MODULE_VERSION}
          manifest: "${FILE_NAME}"
          defaultCR: "${DEFAULT_CR_FILENAME_RELEASE}"
          documentation: "https://kyma-project.io/#/api-gateway/user/README"
          repository: https://github.com/kyma-project/api-gateway
          security: sec-scanners-config.yaml
          manager:
            name: api-gateway-controller-manager
            namespace: kyma-system
            group: apps
            version: v1
            kind: Deployment
          associatedResources:
            - group: operator.kyma-project.io
              kind: APIGateway
              version: v1alpha1
          icons:
            - name: module-icon
              # TODO: provide Api Gateway module icon
              link: https://raw.githubusercontent.com/kyma-project/kyma/refs/heads/main/docs/assets/logo_icon.svg
          EOF
      - name: Commit and push changes
        shell: bash
        working-directory: module-manifests
        env:
          FORK_ORIGIN: "https://${{ vars.GIT_USER_NAME }}:${{ secrets.BOT_TOKEN_GITHUB_TOOLS }}@${{ vars.GH_TOOLS_HOST }}/${{ vars.GIT_USER_NAME }}/${{ vars.MODULE_MANIFESTS_REPO_NAME }}.git"
        run: |
          git add .
          git commit -m "Configuration files update"
          git remote set-url origin ${FORK_ORIGIN}
          git push --set-upstream origin ${BRANCH_NAME} -f
      - name: Create PR if needed
        working-directory: module-manifests
        shell: bash
        env:
          MODULE_MANIFESTS_REPO_URL: "https://${{ vars.GH_TOOLS_HOST }}/kyma/${{ vars.MODULE_MANIFESTS_REPO_NAME }}"
        run: |
          prs=$(gh pr list -R "${MODULE_MANIFESTS_REPO_URL}" -A ${{ vars.GIT_USER_NAME }} --state open --json headRefName | jq -r '.[] | .headRefName')
          if  echo $prs | tr " " '\n' | grep -F -q -x ${BRANCH_NAME}; then
              echo "opened PR already exists, no need to create new one, PR will be updated by push from previous step"
              exit 0
          fi
          gh pr create -B main -H ${{ vars.GIT_USER_NAME }}:${BRANCH_NAME} -R ${MODULE_MANIFESTS_REPO_URL} --title "Release API Gateway ${TAG}" --fill --body "${RELEASES_URL}/${TAG}"
