# This workflow is responsible for all kinds of integration tests run on pull request.
# Those tests depend on a container image so in the first job we wait for the image build to succeed.

name: Main Integration

permissions:
  id-token: write # This is required for requesting the JWT token
  contents: read # This is required for actions/checkout

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "CODEOWNERS"
      - "sec-scanners-config.yaml"
      - ".github/**" #Ignoring since build job isn't triggered on the workflow directory changes
    branches:
      - main
  schedule:
    - cron: '0 5 * * *' # Run every day at 05:00 AM

jobs:
  build:
    name: build api-gateway image
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    if: ${{ github.event_name != 'schedule' }}
    with:
      name: api-gateway-manager
      dockerfile: Dockerfile
      context: .
      build-args: |
        VERSION=${{ github.sha }}
      tags: "${{ github.sha }}"

  get-sha:
    name: Get SHA
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get-sha.outputs.sha }}
    steps:
      - name: Get SHA from latest run of main integration triggered by push
        id: get-latest-push-sha
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'schedule' }}
        with:
          script: |
            const { data } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main-integration.yaml',
              branch: 'main',
              status: 'success',
              per_page: 40 
            });
            const pushRuns = data.workflow_runs.filter(run => run.event === 'push');

            if (pushRuns.length === 0) {
              throw new Error('No successful push runs found');
            }

            const latestRun = pushRuns[0];

            core.setOutput('sha', latestRun.head_sha);
      - name: Set output SHA
        id: get-sha
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "sha=${{ steps.get-latest-push-sha.outputs.sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [build, get-sha]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/integration-tests
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway-manager:${{ needs.get-sha.outputs.sha }}"
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          oidc_well_known_url: "${{ secrets.OIDC_ISSUER_URL }}/.well-known/openid-configuration"

  migration-downtime-tests:
    name: Zero Downtime Migration Tests
    runs-on: ubuntu-latest
    needs: [build, get-sha]
    strategy:
      fail-fast: false
      matrix:
        test_make_target: [ "test-migration-zero-downtime HANDLER=no_auth", "test-migration-zero-downtime HANDLER=allow", "test-migration-zero-downtime HANDLER=noop", "test-migration-zero-downtime HANDLER=jwt" ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/integration-tests
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway-manager:${{ needs.get-sha.outputs.sha }}"
          test_make_target: ${{ matrix.test_make_target }}

  upgrade-tests:
    name: Upgrade tests
    runs-on: ubuntu-latest
    needs: [build, get-sha]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/upgrade-test
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway-manager:${{ needs.get-sha.outputs.sha }}"
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          oidc_well_known_url: "${{ secrets.OIDC_ISSUER_URL }}/.well-known/openid-configuration"
          target_branch: ${{github.ref_name}}

  custom-domain-integration-gcp:
    name: Custom domain integration GCP
    runs-on: ubuntu-latest
    needs: [build, get-sha]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: ./.github/actions/integration-test-gardener
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway-manager:${{ needs.get-sha.outputs.sha }}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          script: ./hack/ci/custom-domain-gardener-gcp.sh
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          oidc_well_known_url: "${{ secrets.OIDC_ISSUER_URL }}/.well-known/openid-configuration"
          dns_secret_json: ${{ secrets.DNS_SECRET_JSON }}

  custom-domain-integration-aws:
    name: Custom domain integration AWS
    runs-on: ubuntu-latest
    needs: [build, get-sha]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: ./.github/actions/integration-test-gardener
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/api-gateway-manager:${{ needs.get-sha.outputs.sha }}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          script: ./hack/ci/custom-domain-gardener-aws.sh
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          oidc_well_known_url: "${{ secrets.OIDC_ISSUER_URL }}/.well-known/openid-configuration"
          dns_secret_json: ${{ secrets.DNS_SECRET_JSON }}

  slack_failed_notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs: [integration-tests, upgrade-tests, custom-domain-integration-gcp, custom-domain-integration-aws]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Notify
        uses: ./.github/actions/slack-notification-failed-workflow
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
