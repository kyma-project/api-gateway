name: Add CVEs to Github Project

permissions:
  contents: read

on:
  workflow_dispatch

env:
 OUTPUT_FILE: cve_list.txt

jobs:
  get-cves:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get issues from repo
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN_GITHUB_TOOLS }}
          REPO: github.tools.sap/kyma/security-scans-modular
          ASSIGNEE: I304607
          
        run: |
         gh issue list \
          --repo "$REPO" \
          --assignee "$ASSIGNEE" \
          --state open \
          --limit 1000 \
          --json number,title \
          | jq -r --arg repo "$REPO" '
              .[]
              | select(.title | test("CVE-[0-9]{4}-[0-9]+"))
              | "\(.title | capture("(?<cve>CVE-[0-9]{4}-[0-9]+)").cve) https://\($repo)/issues/\(.number)"
            ' > "$OUTPUT_FILE"

          if [[ ! -s "$OUTPUT_FILE" ]]; then
            echo "⚠️  No CVE issues found. Exiting."
            exit 0
          fi

          echo "✅ Found $(wc -l <"$OUTPUT_FILE") CVE entries."

      - name: Create drafts
        env:
          GH_TOKEN: ${{ secrets.PROJECT_ACCESS_CLASSIC }}
          ORG: kyma-project
          PROJECT_NUMBER: 27
          STATUS_NAME: ToDo
          READY_NAME: Ready
          READY_VALUE: Sprint
          run: |         
            awk '
            {
                cve = $1
                link = $2
                if (cve_links[cve] != "")
                    cve_links[cve] = cve_links[cve] "\\n" link
                else
                    cve_links[cve] = link
            }
            END {
                for (cve in cve_links) {
                    # Escape double quotes inside the link strings if needed
                    cmd = "./scripts/create_drafts.sh \"" cve "\" \"" cve_links[cve] "\""
                    system(cmd)
                } 
            }
            ' $OUTPUT_FILE
