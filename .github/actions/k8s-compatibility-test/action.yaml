name: 'Kubernetes version compatibility check'
description: 'Runs Kubernetes version compatibility check'
inputs:
  manager_image:
    description: 'Manager image used for test'
    required: true
  test_make_target:
    description: 'Make target for integration tests to run'
    default: 'test-integration'
  client_id:
    description: "Client id for oidc"
    required: false
  client_secret:
    description: "Client secret for oidc"
    required: false
  oidc_well_known_url:
    description: "OIDC well known URL"
    required: false
runs:
  using: "composite"
  steps:
    - uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"
    - name: Checkout to PR branch # to remove after getting rid of pull_request_target
      shell: bash
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      run: |
        git fetch origin pull/${{ github.event.number }}/head:PR-${{ github.event.number }}
        git checkout PR-${{ github.event.number }}
    - name: Create Cluster
      uses: ./.github/actions/provision-k3d-cluster
      with:
        version: "1.30.3"
    - name: Deploy APIGateway manager and run tests
      shell: bash
      env:
        KYMA_DOMAIN: "local.kyma.dev"
        CLIENT_ID: ${{ inputs.client_id }}
        CLIENT_SECRET: ${{ inputs.client_secret }}
        OIDC_CONFIG_URL: ${{ inputs.oidc_well_known_url }}
        IMG: ${{ inputs.manager_image }}
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          k3d image import ${{ inputs.manager_image }} -c k3s-default
        fi
        kubectl config use-context k3d-k3s-default
        EXPORT_RESULT=true make install-istio deploy ${{ inputs.test_make_target }}
    - name: Check deprecations
      run: |
        set -eou pipefail
        GO111MODULE=on go install github.com/prometheus/prom2json/cmd/prom2json@v1.3.3
        kubectl get --context k3d-k3s-default --raw /metrics | prom2json | jq '.[] | select(.name=="apiserver_requested_deprecated_apis").metrics[].labels' > deprecations.txt
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: html-reports-${{ github.job }}-${{ inputs.test_make_target }}
        path: tests/integration/reports/
    - name: Check that deprecations are empty
      run: if [[ $(cat deprecations.txt | jq 'select(.resource != "apirules")') ]]; then exit 1; fi
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: deprecation-report-${{ github.job }}-${{ inputs.test_make_target }}
        path: deprecations.txt
